generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/**
 * =========================
 * Auth / Users
 * =========================
 */
enum Role {
  USER
  ADMIN
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  role      Role     @default(USER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  orders       Order[]
  reservations Reservation[]
}

/**
 * =========================
 * Venue / Sections / Seats
 * =========================
 */
model Venue {
  id        String     @id @default(cuid())
  name      String
  address   String?
  sections  Section[]
  shows     ShowTime[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model Section {
  id      String @id @default(cuid())
  venue   Venue  @relation(fields: [venueId], references: [id])
  venueId String
  name    String
  seats   Seat[]
}

model Seat {
  id          String          @id @default(cuid())
  section     Section         @relation(fields: [sectionId], references: [id])
  sectionId   String
  row         String
  number      String
  inventories SeatInventory[]

  @@unique([sectionId, row, number])
}

/**
 * =========================
 * Events / Shows / Pricing
 * =========================
 */
model Event {
  id          String   @id @default(cuid())
  title       String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  shows ShowTime[]
}

model ShowTime {
  id       String    @id @default(cuid())
  event    Event     @relation(fields: [eventId], references: [id])
  eventId  String
  venue    Venue     @relation(fields: [venueId], references: [id])
  venueId  String
  startsAt DateTime
  endsAt   DateTime?

  inventories  SeatInventory[]
  priceTiers   PriceTier[]
  reservations Reservation[]
  orders       Order[]
}

model PriceTier {
  id     String   @id @default(cuid())
  show   ShowTime @relation(fields: [showId], references: [id])
  showId String
  name   String
  price  Decimal  @db.Decimal(10, 2)

  seatInventories SeatInventory[] 
}

/**
 * =========================
 * Inventory (per seat per show)
 * =========================
 */
enum SeatStatus {
  AVAILABLE
  HELD
  SOLD
}

model SeatInventory {
  id     String     @id @default(cuid())
  show   ShowTime   @relation(fields: [showId], references: [id])
  showId String
  seat   Seat       @relation(fields: [seatId], references: [id])
  seatId String
  status SeatStatus @default(AVAILABLE)


  priceTier     PriceTier? @relation(fields: [priceTierId], references: [id])
  priceTierId   String?
  priceSnapshot Decimal?   @db.Decimal(10, 2)

  reservationItems ReservationItem[]
  orderItems       OrderItem[]

  @@unique([showId, seatId])
  @@index([showId, status])
}

/**
 * =========================
 * Reservations (Hold)
 * =========================
 */
enum ReservationStatus {
  ACTIVE
  EXPIRED
  CONFIRMED
}

model Reservation {
  id        String            @id @default(cuid())
  user      User              @relation(fields: [userId], references: [id])
  userId    String
  show      ShowTime          @relation(fields: [showId], references: [id])
  showId    String
  status    ReservationStatus @default(ACTIVE)
  expiresAt DateTime
  createdAt DateTime          @default(now())

  items ReservationItem[]

  order Order? @relation("OrderReservation")

  @@index([expiresAt])
  @@index([status, showId])
}

model ReservationItem {
  id              String        @id @default(cuid())
  reservation     Reservation   @relation(fields: [reservationId], references: [id], onDelete: Cascade)
  reservationId   String
  seatInventory   SeatInventory @relation(fields: [seatInventoryId], references: [id])
  seatInventoryId String

  @@unique([reservationId, seatInventoryId])
}

/**
 * =========================
 * Orders / Payments
 * =========================
 */
enum OrderStatus {
  PENDING
  PAID
  CANCELLED
  EXPIRED
}

enum PaymentStatus {
  INIT
  REQUIRES_ACTION
  SUCCEEDED
  FAILED
  CANCELLED
}

model Order {
  id          String      @id @default(cuid())
  user        User        @relation(fields: [userId], references: [id])
  userId      String
  show        ShowTime    @relation(fields: [showId], references: [id])
  showId      String
  status      OrderStatus @default(PENDING)
  totalAmount Decimal     @default(0) @db.Decimal(10, 2)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  items   OrderItem[]
  payment Payment?

  reservation   Reservation? @relation("OrderReservation", fields: [reservationId], references: [id])
  reservationId String?      @unique

  @@index([status, createdAt])
}

model OrderItem {
  id              String        @id @default(cuid())
  order           Order         @relation(fields: [orderId], references: [id], onDelete: Cascade)
  orderId         String
  seatInventory   SeatInventory @relation(fields: [seatInventoryId], references: [id])
  seatInventoryId String
  price           Decimal       @db.Decimal(10, 2)

  @@unique([orderId, seatInventoryId])
}

model Payment {
  id        String        @id @default(cuid())
  order     Order         @relation(fields: [orderId], references: [id])
  orderId   String        @unique
  provider  String
  intentId  String?
  status    PaymentStatus @default(INIT)
  amount    Decimal       @db.Decimal(10, 2)
  raw       Json?
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
}

/**
 * =========================
 * Idempotency
 * =========================
 */
model IdempotencyKey {
  id        String   @id @default(cuid())
  key       String   @unique
  scope     String
  userId    String?
  response  Json
  createdAt DateTime @default(now())
}
